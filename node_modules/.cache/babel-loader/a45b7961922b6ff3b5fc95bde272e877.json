{"ast":null,"code":"// action 为一个 对象 → 同步action\n// action 为一个函数 → 异步action\n// 因为函数里面能开启异步任务\nimport axios from \"axios\";\nimport store from \"./store\"; // 1: 单曲, 10: 专辑, 100: 歌手, 1000: 歌单, 1002: 用户, 1004: MV, 1006: 歌词, 1009: 电台, 1014: 视频,\n\nconst TYPE = {\n  'songs': 1,\n  'artists': 100,\n  'albums': 10,\n  'videos': 1014,\n  'songlists': 1000,\n  'lyrics': 10,\n  'users': 1002\n};\naxios.defaults.baseURL = 'http://127.0.0.1:8000'; // export const createSearchAction = (type, data) => ({type,data});\n// 异步任务会被传入一个 dispatch 参数供使用\n\nexport const createSearchAction = (type, data) => {\n  console.log('dispatch reach', type, data);\n  return async dispatch => {\n    console.log('await');\n    let res = await axios(`http://localhost:4000/search?keywords=${data}&&type=${TYPE[type]}`);\n    console.log('await done', res);\n    dispatch({\n      type: 'updateData',\n      data: {\n        type: type,\n        data: res.data.result\n      }\n    });\n  };\n};\nexport const addNewSongAction = data => {\n  return async dispatch => {\n    let song = await axios(`http://localhost:4000/song/detail?ids=${data}`);\n    dispatch({\n      type: 'addSong',\n      data: song.data.songs[0]\n    });\n  };\n};\nexport const getMvAction = (id, duration) => {\n  return async dispatch => {\n    let mv = await axios(`http://localhost:4000/video/url?id=${id}`);\n    console.log(mv);\n    dispatch({\n      type: 'watchMV',\n      data: {\n        video: mv.data.urls[0],\n        duration\n      }\n    });\n  };\n};\nexport const loginAction = (phone, password) => {\n  return async dispatch => {\n    let res = await axios.post('http://localhost:4000/login/cellphone', {\n      phone: phone,\n      password: password\n    });\n    console.log(res);\n    dispatch({\n      type: 'login',\n      data: res\n    });\n  };\n};","map":{"version":3,"sources":["E:/js/react/music-app/React-musicApp/src/Redux/searchActions.js"],"names":["axios","store","TYPE","defaults","baseURL","createSearchAction","type","data","console","log","dispatch","res","result","addNewSongAction","song","songs","getMvAction","id","duration","mv","video","urls","loginAction","phone","password","post"],"mappings":"AAAA;AACA;AACA;AAEA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,SAAlB,C,CACA;;AACA,MAAMC,IAAI,GAAG;AACX,WAAQ,CADG;AAEX,aAAU,GAFC;AAGX,YAAS,EAHE;AAIX,YAAS,IAJE;AAKX,eAAY,IALD;AAMX,YAAS,EANE;AAOX,WAAQ;AAPG,CAAb;AASAF,KAAK,CAACG,QAAN,CAAeC,OAAf,GAAyB,uBAAzB,C,CACA;AACA;;AACA,OAAO,MAAMC,kBAAkB,GAAG,CAACC,IAAD,EAAOC,IAAP,KAAgB;AAChDC,EAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BH,IAA9B,EAAoCC,IAApC;AACA,SAAO,MAAOG,QAAP,IAAoB;AACzBF,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACA,QAAIE,GAAG,GAAG,MAAMX,KAAK,CAAE,yCAAwCO,IAAK,UAASL,IAAI,CAACI,IAAD,CAAO,EAAnE,CAArB;AACAE,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BE,GAA1B;AAEAD,IAAAA,QAAQ,CAAC;AACPJ,MAAAA,IAAI,EAAE,YADC;AAEPC,MAAAA,IAAI,EAAE;AACJD,QAAAA,IAAI,EAAEA,IADF;AAEJC,QAAAA,IAAI,EAAEI,GAAG,CAACJ,IAAJ,CAASK;AAFX;AAFC,KAAD,CAAR;AAQD,GAbD;AAcD,CAhBM;AAkBP,OAAO,MAAMC,gBAAgB,GAAIN,IAAD,IAAU;AACxC,SAAO,MAAOG,QAAP,IAAoB;AACzB,QAAII,IAAI,GAAG,MAAMd,KAAK,CAAE,yCAAwCO,IAAK,EAA/C,CAAtB;AACAG,IAAAA,QAAQ,CAAC;AAACJ,MAAAA,IAAI,EAAC,SAAN;AAAiBC,MAAAA,IAAI,EAACO,IAAI,CAACP,IAAL,CAAUQ,KAAV,CAAgB,CAAhB;AAAtB,KAAD,CAAR;AACD,GAHD;AAID,CALM;AAOP,OAAO,MAAMC,WAAW,GAAG,CAACC,EAAD,EAAKC,QAAL,KAAiB;AAC1C,SAAO,MAAOR,QAAP,IAAoB;AACzB,QAAIS,EAAE,GAAG,MAAMnB,KAAK,CAAE,sCAAqCiB,EAAG,EAA1C,CAApB;AACAT,IAAAA,OAAO,CAACC,GAAR,CAAYU,EAAZ;AACAT,IAAAA,QAAQ,CAAC;AAACJ,MAAAA,IAAI,EAAC,SAAN;AAAiBC,MAAAA,IAAI,EAAC;AAACa,QAAAA,KAAK,EAACD,EAAE,CAACZ,IAAH,CAAQc,IAAR,CAAa,CAAb,CAAP;AAAwBH,QAAAA;AAAxB;AAAtB,KAAD,CAAR;AACD,GAJD;AAKD,CANM;AAQP,OAAO,MAAMI,WAAW,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB;AAC9C,SAAO,MAAOd,QAAP,IAAoB;AACzB,QAAIC,GAAG,GAAG,MAAMX,KAAK,CAACyB,IAAN,CAAW,uCAAX,EAAmD;AAACF,MAAAA,KAAK,EAACA,KAAP;AAAaC,MAAAA,QAAQ,EAACA;AAAtB,KAAnD,CAAhB;AACAhB,IAAAA,OAAO,CAACC,GAAR,CAAYE,GAAZ;AAEAD,IAAAA,QAAQ,CAAC;AAACJ,MAAAA,IAAI,EAAC,OAAN;AAAeC,MAAAA,IAAI,EAAEI;AAArB,KAAD,CAAR;AACD,GALD;AAMD,CAPM","sourcesContent":["// action 为一个 对象 → 同步action\r\n// action 为一个函数 → 异步action\r\n// 因为函数里面能开启异步任务\r\n\r\nimport axios from \"axios\"\r\nimport store from \"./store\";\r\n// 1: 单曲, 10: 专辑, 100: 歌手, 1000: 歌单, 1002: 用户, 1004: MV, 1006: 歌词, 1009: 电台, 1014: 视频,\r\nconst TYPE = {\r\n  'songs':1,\r\n  'artists':100,\r\n  'albums':10,\r\n  'videos':1014,\r\n  'songlists':1000,\r\n  'lyrics':10,\r\n  'users':1002,\r\n}\r\naxios.defaults.baseURL = 'http://127.0.0.1:8000'\r\n// export const createSearchAction = (type, data) => ({type,data});\r\n// 异步任务会被传入一个 dispatch 参数供使用\r\nexport const createSearchAction = (type, data) => {\r\n  console.log('dispatch reach', type, data)\r\n  return async (dispatch) => {\r\n    console.log('await')\r\n    let res = await axios(`http://localhost:4000/search?keywords=${data}&&type=${TYPE[type]}`);\r\n    console.log('await done', res)\r\n    \r\n    dispatch({\r\n      type: 'updateData',\r\n      data: {\r\n        type: type,\r\n        data: res.data.result\r\n      }\r\n    })\r\n      \r\n  }\r\n}\r\n\r\nexport const addNewSongAction = (data) => {\r\n  return async (dispatch) => {\r\n    let song = await axios(`http://localhost:4000/song/detail?ids=${data}`);\r\n    dispatch({type:'addSong', data:song.data.songs[0]})\r\n  }\r\n}\r\n\r\nexport const getMvAction = (id, duration) =>{\r\n  return async (dispatch) => {\r\n    let mv = await axios(`http://localhost:4000/video/url?id=${id}`)\r\n    console.log(mv);\r\n    dispatch({type:'watchMV', data:{video:mv.data.urls[0], duration}})\r\n  }\r\n}\r\n\r\nexport const loginAction = (phone, password) => {\r\n  return async (dispatch) => {\r\n    let res = await axios.post('http://localhost:4000/login/cellphone',{phone:phone,password:password})\r\n    console.log(res);\r\n    \r\n    dispatch({type:'login', data: res})\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}