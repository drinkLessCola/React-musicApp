{"ast":null,"code":"import axios from 'axios';\naxios.defaults.baseURL = 'https://netease-cloud-music-api-tawny-nine.vercel.app/';\naxios.defaults.withCredentials = true; // export const getLikedSongsList = (uid) => {\n//   return async (dispatch) => {\n//     let res = await axios(`/likelist?uid=${uid}`)\n//     console.log(res);\n//   }\n// }\n// 添加一首歌到播放列表\n\nexport const addNewSongAction = data => {\n  return async dispatch => {\n    let res = await axios(`/song/detail?ids=${data}`);\n    let lyric = await axios(`/lyric?id=${res.data.songs[0].id}`);\n    let lyricArr = lyric.data.lrc.lyric.split('\\n').map(l => {\n      let [time, text] = l.split(']');\n      let [min, sec] = time.split(':');\n      min = parseInt(min);\n      sec = Math.floor(parseFloat(sec));\n      return {\n        text,\n        time: min * 60 + sec\n      };\n    });\n    dispatch({\n      type: 'addSong',\n      data: {\n        song: res.data.songs[0],\n        lyric: lyricArr\n      }\n    });\n  };\n};\nexport const getLyricAction = id => {\n  return async dispatch => {\n    let res = await axios(`/lyric?id=${id}`);\n    console.log('lyric', res);\n  };\n}; // 添加整个歌单到播放列表\n\nexport const replaceListAction = (songs, id) => {\n  return async dispatch => {\n    let lyric = await axios(`/lyric?id=${songs[id].id}`);\n    let lastTime = 0;\n    let lyricArr = lyric.data.lrc.lyric.split('\\n').reduce((resArr, l) => {\n      if (l == '') return resArr;\n      console.log(\"#\", l);\n      let [t, text] = l.split(']');\n      t = t.slice(1);\n      let [min, sec] = t.split(':');\n      min = parseInt(min);\n      sec = Math.floor(parseFloat(sec));\n      const time = min * 60 + sec;\n      if (time > lastTime) resArr.push({\n        text,\n        time\n      });\n      return resArr;\n    });\n    dispatch(replaceAction(songs, id));\n    dispatch({\n      type: 'lyric',\n      data: lyricArr\n    });\n  };\n};\nexport const replaceAction = (songs, id) => {\n  return {\n    type: 'replaceList',\n    data: {\n      songs,\n      id\n    }\n  };\n}; // 切换播放\n\nexport const shiftAction = (newIdx, id) => {\n  return async dispatch => {\n    let lyric = await axios(`/lyric?id=${id}`);\n    let lyricArr = lyric.data.lrc.lyric.split('\\n').map(l => {\n      if (l == '') return;\n      console.log(\"#\", l);\n      let [time, text] = l.split(']');\n      time = time.slice(1);\n      let [min, sec] = time.split(':');\n      min = parseInt(min);\n      sec = Math.floor(parseFloat(sec));\n      console.log(min, sec);\n      return {\n        text,\n        time: min * 60 + sec\n      };\n    });\n    dispatch({\n      type: \"shift\",\n      data: {\n        lyric: lyricArr,\n        idx: newIdx\n      }\n    });\n  };\n};\nexport const updateCurTimeAction = cur => {\n  return {\n    type: \"updateCurTime\",\n    data: cur\n  };\n};","map":{"version":3,"sources":["E:/js/react/music-app/React-musicApp/src/Redux/songActions.js"],"names":["axios","defaults","baseURL","withCredentials","addNewSongAction","data","dispatch","res","lyric","songs","id","lyricArr","lrc","split","map","l","time","text","min","sec","parseInt","Math","floor","parseFloat","type","song","getLyricAction","console","log","replaceListAction","lastTime","reduce","resArr","t","slice","push","replaceAction","shiftAction","newIdx","idx","updateCurTimeAction","cur"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\n\r\naxios.defaults.baseURL = 'https://netease-cloud-music-api-tawny-nine.vercel.app/'\r\naxios.defaults.withCredentials = true\r\n\r\n// export const getLikedSongsList = (uid) => {\r\n//   return async (dispatch) => {\r\n//     let res = await axios(`/likelist?uid=${uid}`)\r\n//     console.log(res);\r\n//   }\r\n// }\r\n// 添加一首歌到播放列表\r\nexport const addNewSongAction = (data) => {\r\n  return async (dispatch) => {\r\n    let res = await axios(`/song/detail?ids=${data}`);\r\n    let lyric = await axios(`/lyric?id=${res.data.songs[0].id}`);\r\n    let lyricArr = lyric.data.lrc.lyric.split('\\n').map((l) => {\r\n      let [time, text] = l.split(']');\r\n      let [min, sec] = time.split(':');\r\n      min = parseInt(min);\r\n      sec = Math.floor(parseFloat(sec));\r\n      return {\r\n        text,\r\n        time: min * 60 + sec\r\n      }\r\n    });\r\n    dispatch({ type: 'addSong', data: { song: res.data.songs[0], lyric: lyricArr } })\r\n  }\r\n}\r\n\r\nexport const getLyricAction = (id) => {\r\n  return async (dispatch) => {\r\n    let res = await axios(`/lyric?id=${id}`);\r\n    console.log('lyric', res);\r\n  }\r\n}\r\n\r\n// 添加整个歌单到播放列表\r\nexport const replaceListAction = (songs, id) => {\r\n  return async (dispatch) => {\r\n    let lyric = await axios(`/lyric?id=${songs[id].id}`);\r\n    let lastTime = 0;\r\n    let lyricArr = lyric.data.lrc.lyric.split('\\n').reduce((resArr, l) => {\r\n      if (l == '') return resArr;\r\n      console.log(\"#\", l);\r\n      let [t, text] = l.split(']');\r\n      t = t.slice(1);\r\n      let [min, sec] = t.split(':');\r\n      min = parseInt(min);\r\n      sec = Math.floor(parseFloat(sec));\r\n      const time = min * 60 + sec;\r\n      if (time > lastTime) resArr.push({ text, time });\r\n      return resArr\r\n    });\r\n    dispatch(replaceAction(songs, id))\r\n    dispatch({ type: 'lyric', data: lyricArr })\r\n  }\r\n}\r\nexport const replaceAction = (songs, id) => {\r\n  return {\r\n    type: 'replaceList',\r\n    data: { songs, id }\r\n  }\r\n}\r\n\r\n// 切换播放\r\nexport const shiftAction = (newIdx, id) => {\r\n  return async (dispatch) => {\r\n    let lyric = await axios(`/lyric?id=${id}`);\r\n    let lyricArr = lyric.data.lrc.lyric.split('\\n').map((l) => {\r\n      if (l == '') return;\r\n      console.log(\"#\", l);\r\n      let [time, text] = l.split(']');\r\n      time = time.slice(1);\r\n      let [min, sec] = time.split(':');\r\n      min = parseInt(min);\r\n      sec = Math.floor(parseFloat(sec));\r\n      console.log(min, sec)\r\n      return {\r\n        text,\r\n        time: min * 60 + sec\r\n      }\r\n    });\r\n    dispatch({ type: \"shift\", data: { lyric: lyricArr, idx: newIdx } })\r\n  }\r\n}\r\n\r\nexport const updateCurTimeAction = (cur) => {\r\n  return {\r\n    type: \"updateCurTime\",\r\n    data: cur\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}