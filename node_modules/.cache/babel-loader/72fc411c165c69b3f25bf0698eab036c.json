{"ast":null,"code":"var _jsxFileName = \"E:\\\\js\\\\react\\\\music-app\\\\React-musicApp\\\\src\\\\Component\\\\PlayerPage\\\\index.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useCallback, useEffect, useLayoutEffect, useRef } from 'react';\nimport { connect } from 'react-redux';\nimport { togglePlayerPageAction } from '../../Redux/playerPageAction';\nimport { getLyricAction } from '../../Redux/songActions';\nimport './index.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction PlayerPage(props) {\n  _s();\n\n  const {\n    playerPageOpen = false,\n    song,\n    curTime\n  } = props;\n  const lyric = useRef(null);\n  console.log(\"playerPageOpen\", playerPageOpen);\n\n  const handleClose = function () {\n    console.log('close');\n    props.togglePlayerPage();\n  }; // \n\n\n  let curIdx = 0;\n  useCallback;\n  useLayoutEffect(() => {\n    if (curIdx < 6) return;\n    console.log(lyric);\n    if (!lyric || !lyric.current) return;\n    lyric.current.scrollTop = (curIdx - 6) * 30;\n  }, [curIdx]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: 'PlayerPage ' + (playerPageOpen ? \"active\" : ''),\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"close-btn\",\n      onClick: handleClose,\n      children: \"\\u2228\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"player-cover\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"player-cover-img\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: song === null || song === void 0 ? void 0 : song.al.picUrl\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        className: \"shadow-effect\",\n        src: song === null || song === void 0 ? void 0 : song.al.picUrl\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"player-right\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"player-song-name\",\n        children: song === null || song === void 0 ? void 0 : song.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"player-lyric\",\n        ref: lyric,\n        children: props.lyric instanceof Array && props.lyric.map((l, idx) => {\n          return /*#__PURE__*/_jsxDEV(\"p\", {\n            className: curLyric.includes(l) ? 'lyric-active' : '',\n            children: l === null || l === void 0 ? void 0 : l.text\n          }, idx, false, {\n            fileName: _jsxFileName,\n            lineNumber: 42,\n            columnNumber: 20\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 5\n  }, this);\n}\n\n_s(PlayerPage, \"NIo5KD5xi1afwVO2x3HqkcP2PhQ=\");\n\n_c = PlayerPage;\nexport default connect(state => ({\n  playerPageOpen: state.playerPageOpen,\n  lyric: state.lyric,\n  song: state.song,\n  curTime: state.curTime\n}), {\n  getLyric: getLyricAction,\n  togglePlayerPage: togglePlayerPageAction\n})(PlayerPage);\n\nvar _c;\n\n$RefreshReg$(_c, \"PlayerPage\");","map":{"version":3,"sources":["E:/js/react/music-app/React-musicApp/src/Component/PlayerPage/index.jsx"],"names":["React","useCallback","useEffect","useLayoutEffect","useRef","connect","togglePlayerPageAction","getLyricAction","PlayerPage","props","playerPageOpen","song","curTime","lyric","console","log","handleClose","togglePlayerPage","curIdx","current","scrollTop","al","picUrl","name","Array","map","l","idx","curLyric","includes","text","state","getLyric"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useLayoutEffect, useRef } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { togglePlayerPageAction } from '../../Redux/playerPageAction';\r\nimport { getLyricAction } from '../../Redux/songActions'\r\nimport './index.css'\r\n\r\nfunction PlayerPage(props) {\r\n  const { playerPageOpen = false, song, curTime } = props;\r\n  const lyric = useRef(null);\r\n  console.log(\"playerPageOpen\", playerPageOpen)\r\n  const handleClose = function(){\r\n    console.log('close')\r\n    props.togglePlayerPage();\r\n  }\r\n\r\n  // \r\n  let curIdx = 0;\r\n  useCallback\r\n  useLayoutEffect(()=> {\r\n    if(curIdx < 6) return;\r\n    console.log(lyric)\r\n    if(!lyric || !lyric.current) return;\r\n    lyric.current.scrollTop = (curIdx - 6) * 30;\r\n  },[curIdx])\r\n\r\n\r\n  return (\r\n    <div className={'PlayerPage ' + (playerPageOpen? \"active\" : '' )}>\r\n      {/* <img className='bg-effect' src={song?.al.picUrl}></img> */}\r\n      {/* <div className='player-cover-container'> */}\r\n      <button className='close-btn' onClick={handleClose}>âˆ¨</button>\r\n      <div className='player-cover'>\r\n        <div className='player-cover-img'>\r\n          <img src={song?.al.picUrl}></img>\r\n        </div>\r\n        <img className='shadow-effect' src={song?.al.picUrl}></img>\r\n      </div>\r\n      <div className='player-right'>\r\n        <h2 className='player-song-name'>{song?.name}</h2>\r\n        <div className='player-lyric' ref={lyric}>\r\n          {props.lyric instanceof Array && props.lyric.map((l, idx) => {\r\n            return <p className={curLyric.includes(l)? 'lyric-active' : ''} key={idx}>{l?.text}</p>\r\n          })}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\nexport default connect(\r\n  (state) => ({\r\n    playerPageOpen: state.playerPageOpen,\r\n    lyric: state.lyric,\r\n    song: state.song,\r\n    curTime: state.curTime\r\n  }),\r\n  {\r\n    getLyric: getLyricAction,\r\n    togglePlayerPage:togglePlayerPageAction\r\n  }\r\n)(PlayerPage)"]},"metadata":{},"sourceType":"module"}