{"ast":null,"code":"var _jsxFileName = \"E:\\\\js\\\\react\\\\music-app\\\\React-musicApp\\\\src\\\\Component\\\\PlayerPage\\\\index.jsx\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { togglePlayerPageAction } from '../../Redux/playerPageAction';\nimport { getLyricAction } from '../../Redux/songActions';\nimport './index.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction PlayerPage(props) {\n  const {\n    playerPageOpen = false,\n    song,\n    curTime\n  } = props;\n  console.log(\"playerPageOpen\", playerPageOpen);\n\n  const handleClose = function () {\n    console.log('close');\n    props.togglePlayerPage();\n  };\n\n  let flag = true;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: 'PlayerPage ' + (playerPageOpen ? \"active\" : ''),\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"close-btn\",\n      onClick: handleClose,\n      children: \"\\u2228\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"player-cover\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"player-cover-img\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: song === null || song === void 0 ? void 0 : song.al.picUrl\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 22,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        className: \"shadow-effect\",\n        src: song === null || song === void 0 ? void 0 : song.al.picUrl\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"player-right\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"player-song-name\",\n        children: song === null || song === void 0 ? void 0 : song.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"player-lyric\",\n        children: props.lyric.map((l, idx) => {\n          let className = '';\n\n          if (flag && startTime && startTime > curTime) {\n            className = 'lyric-active';\n            flag = false;\n          }\n\n          return /*#__PURE__*/_jsxDEV(\"p\", {\n            \"data-time\": time,\n            className: className,\n            children: text\n          }, idx, false, {\n            fileName: _jsxFileName,\n            lineNumber: 37,\n            columnNumber: 20\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 5\n  }, this);\n}\n\n_c = PlayerPage;\nexport default connect(state => ({\n  playerPageOpen: state.playerPageOpen,\n  lyric: state.lyric,\n  song: state.song,\n  curTime: state.curTime\n}), {\n  getLyric: getLyricAction,\n  togglePlayerPage: togglePlayerPageAction\n})(PlayerPage);\n\nvar _c;\n\n$RefreshReg$(_c, \"PlayerPage\");","map":{"version":3,"sources":["E:/js/react/music-app/React-musicApp/src/Component/PlayerPage/index.jsx"],"names":["React","connect","togglePlayerPageAction","getLyricAction","PlayerPage","props","playerPageOpen","song","curTime","console","log","handleClose","togglePlayerPage","flag","al","picUrl","name","lyric","map","l","idx","className","startTime","time","text","state","getLyric"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,sBAAT,QAAuC,8BAAvC;AACA,SAASC,cAAT,QAA+B,yBAA/B;AACA,OAAO,aAAP;;;AAEA,SAASC,UAAT,CAAoBC,KAApB,EAA2B;AACzB,QAAM;AAAEC,IAAAA,cAAc,GAAG,KAAnB;AAA0BC,IAAAA,IAA1B;AAAgCC,IAAAA;AAAhC,MAA4CH,KAAlD;AACAI,EAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BJ,cAA9B;;AACA,QAAMK,WAAW,GAAG,YAAU;AAC5BF,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACAL,IAAAA,KAAK,CAACO,gBAAN;AACD,GAHD;;AAIA,MAAIC,IAAI,GAAG,IAAX;AACA,sBACE;AAAK,IAAA,SAAS,EAAE,iBAAiBP,cAAc,GAAE,QAAF,GAAa,EAA5C,CAAhB;AAAA,4BAGE;AAAQ,MAAA,SAAS,EAAC,WAAlB;AAA8B,MAAA,OAAO,EAAEK,WAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAHF,eAIE;AAAK,MAAA,SAAS,EAAC,cAAf;AAAA,8BACE;AAAK,QAAA,SAAS,EAAC,kBAAf;AAAA,+BACE;AAAK,UAAA,GAAG,EAAEJ,IAAF,aAAEA,IAAF,uBAAEA,IAAI,CAAEO,EAAN,CAASC;AAAnB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cADF,eAIE;AAAK,QAAA,SAAS,EAAC,eAAf;AAA+B,QAAA,GAAG,EAAER,IAAF,aAAEA,IAAF,uBAAEA,IAAI,CAAEO,EAAN,CAASC;AAA7C;AAAA;AAAA;AAAA;AAAA,cAJF;AAAA;AAAA;AAAA;AAAA;AAAA,YAJF,eAWE;AAAK,MAAA,SAAS,EAAC,cAAf;AAAA,8BACE;AAAI,QAAA,SAAS,EAAC,kBAAd;AAAA,kBAAkCR,IAAlC,aAAkCA,IAAlC,uBAAkCA,IAAI,CAAES;AAAxC;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAK,QAAA,SAAS,EAAC,cAAf;AAAA,kBACGX,KAAK,CAACY,KAAN,CAAYC,GAAZ,CAAgB,CAACC,CAAD,EAAIC,GAAJ,KAAY;AAE3B,cAAIC,SAAS,GAAG,EAAhB;;AACA,cAAGR,IAAI,IAAIS,SAAR,IAAqBA,SAAS,GAAGd,OAApC,EAA6C;AAC3Ca,YAAAA,SAAS,GAAG,cAAZ;AACAR,YAAAA,IAAI,GAAG,KAAP;AACD;;AACD,8BAAO;AAAG,yBAAWU,IAAd;AAAoB,YAAA,SAAS,EAAEF,SAA/B;AAAA,sBAAqDG;AAArD,aAA+CJ,GAA/C;AAAA;AAAA;AAAA;AAAA,kBAAP;AACD,SARA;AADH;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YAXF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AA4BD;;KApCQhB,U;AAuCT,eAAeH,OAAO,CACnBwB,KAAD,KAAY;AACVnB,EAAAA,cAAc,EAAEmB,KAAK,CAACnB,cADZ;AAEVW,EAAAA,KAAK,EAAEQ,KAAK,CAACR,KAFH;AAGVV,EAAAA,IAAI,EAAEkB,KAAK,CAAClB,IAHF;AAIVC,EAAAA,OAAO,EAAEiB,KAAK,CAACjB;AAJL,CAAZ,CADoB,EAOpB;AACEkB,EAAAA,QAAQ,EAAEvB,cADZ;AAEES,EAAAA,gBAAgB,EAACV;AAFnB,CAPoB,CAAP,CAWbE,UAXa,CAAf","sourcesContent":["import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { togglePlayerPageAction } from '../../Redux/playerPageAction';\r\nimport { getLyricAction } from '../../Redux/songActions'\r\nimport './index.css'\r\n\r\nfunction PlayerPage(props) {\r\n  const { playerPageOpen = false, song, curTime } = props;\r\n  console.log(\"playerPageOpen\", playerPageOpen)\r\n  const handleClose = function(){\r\n    console.log('close')\r\n    props.togglePlayerPage();\r\n  }\r\n  let flag = true;\r\n  return (\r\n    <div className={'PlayerPage ' + (playerPageOpen? \"active\" : '' )}>\r\n      {/* <img className='bg-effect' src={song?.al.picUrl}></img> */}\r\n      {/* <div className='player-cover-container'> */}\r\n      <button className='close-btn' onClick={handleClose}>âˆ¨</button>\r\n      <div className='player-cover'>\r\n        <div className='player-cover-img'>\r\n          <img src={song?.al.picUrl}></img>\r\n        </div>\r\n        <img className='shadow-effect' src={song?.al.picUrl}></img>\r\n      </div>\r\n      {/* </div> */}\r\n      <div className='player-right'>\r\n        <h2 className='player-song-name'>{song?.name}</h2>\r\n        <div className='player-lyric'>\r\n          {props.lyric.map((l, idx) => {\r\n            \r\n            let className = ''\r\n            if(flag && startTime && startTime > curTime) {\r\n              className = 'lyric-active'\r\n              flag = false\r\n            }\r\n            return <p data-time={time} className={className} key={idx}>{text}</p>\r\n          })}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\nexport default connect(\r\n  (state) => ({\r\n    playerPageOpen: state.playerPageOpen,\r\n    lyric: state.lyric,\r\n    song: state.song,\r\n    curTime: state.curTime\r\n  }),\r\n  {\r\n    getLyric: getLyricAction,\r\n    togglePlayerPage:togglePlayerPageAction\r\n  }\r\n)(PlayerPage)"]},"metadata":{},"sourceType":"module"}